CREATE DATABASE db_protein;

CREATE TABLE IF NOT EXISTS Organism (
    id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    infected BOOLEAN NOT NULL,
    organism_mnemonic varchar(80) NOT NULL,
    sex varchar(15) NOT NULL,
    description varchar(200),
    UNIQUE (infected, organism_mnemonic, sex, description)
);

CREATE TABLE IF NOT EXISTS Pattern (
    id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    hash varchar(200),
    subsequence varchar(4500) NOT NULL,
    start_pos INT NOT NULL,
    end_pos INT NOT NULL,
    UNIQUE (hash, start_pos, end_pos)
);

CREATE TABLE IF NOT EXISTS "User" (
    username varchar(30) NOT NULL PRIMARY KEY,
    password varchar(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS Protein (
    id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    hash varchar(200),
    sequence varchar(4500) NOT NULL,
    organism INT NOT NULL,
    CONSTRAINT fk_org FOREIGN KEY (organism)
      REFERENCES Organism (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
    UNIQUE (hash, organism)
);

CREATE TABLE IF NOT EXISTS Protein_pair (
    id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    protein1 INT NOT NULL,
    protein2 INT NOT NULL,
    pattern_count INT NOT NULL,
    similarity REAL NOT NULL,
    CONSTRAINT fk_pr1 FOREIGN KEY (protein1)
      REFERENCES Protein (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
    CONSTRAINT fk_pr2 FOREIGN KEY (protein2)
      REFERENCES Protein (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Result_set (
    id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    protein_pair INT NOT NULL,
    pattern INT NOT NULL,
    CONSTRAINT fk_pair FOREIGN KEY (protein_pair)
      REFERENCES Protein_pair (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
    CONSTRAINT fk_pat FOREIGN KEY (pattern)
      REFERENCES Pattern (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS User_result (
    id INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    "user" varchar(30) NOT NULL,
    result_set INT NOT NULL,
    CONSTRAINT fk_us FOREIGN KEY ("user")
      REFERENCES "User" (username) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
    CONSTRAINT fk_set FOREIGN KEY (result_set)
      REFERENCES Result_set (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE FUNCTION hashCodeProt() RETURNS trigger AS $hash_prot$
BEGIN
  NEW.hash = md5(NEW.sequence);
  RETURN NEW;
END;
$hash_prot$ LANGUAGE plpgsql;

CREATE TRIGGER hash_prot BEFORE INSERT ON Protein
    FOR EACH ROW EXECUTE PROCEDURE hashCodeProt();

CREATE FUNCTION hashCodePat() RETURNS trigger AS $hash_pat$
BEGIN
  NEW.hash = md5(NEW.subsequence);
  RETURN NEW;
END;
$hash_pat$ LANGUAGE plpgsql;

CREATE TRIGGER hash_pat BEFORE INSERT ON Pattern
    FOR EACH ROW EXECUTE PROCEDURE hashCodePat();

CREATE INDEX org_index ON Organism (id);
CREATE INDEX pat_index ON Pattern (id);
CREATE INDEX pair_index ON Protein_pair (id);
CREATE INDEX pr_index ON Protein (id);
CREATE INDEX res_index ON Result_set (id);
